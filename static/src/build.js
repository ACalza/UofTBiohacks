import mkdirpAsync from 'mkdirp-then'
import fsp from 'fs-promise'
import React from 'react'
import ReactDOMServer from 'react-dom/server'
import chalk from 'chalk'

import Page from './components/Page.js'

// auto generated by loaders/routes.js
const routes = {}

console.log(chalk.magenta('Found these pages:'))
Object.keys(routes).forEach(console.log)

const routeRenders = Object.keys(routes).map((route) => () => {
  return new Promise((resolve, reject) => {
    console.log(chalk.magenta(`Attempting ${chalk.blue('React.createElement')} on ${route}`))

    let message = ''

    let component
    try {
      component = routes[route]().default
    } catch(e) {
      if (e.name === 'SyntaxError') {
        console.log('Ignoring syntax error:', e)
        message += `Bailed on syntax error for ${route}; `
        // return resolve(`Bailed on syntax error for ${route}`)
      } else {
        console.error('component loading error:', e)
        return reject(e)
      }
    }

    if (typeof(component) === 'function') {
      try {
        component = React.createElement(component)
      } catch(e) {
        console.error('build.js: ', e)
        return reject(e)
      }
    }

    let name = route.split("/")[0]
    route = 'dist/' + route

    let page
    try {
      page =
      '<!doctype html>\n'
      + ReactDOMServer.renderToStaticMarkup(<Page body={component} name={name.replace('.js', '')}/>)
    } catch(e) {
      console.error('static markup:' , e)
      return reject(e);
    }

    console.log(chalk.green(`Created element for ${route}`))

    const dir = route.replace(/\/index.js$/, '')
    const filename = route.replace(/\.js$/, '.html')
    mkdirpAsync(dir)
      .then(_ => fsp.writeFile(filename, page))
      .then(_ => {
        console.log('wrote ' + chalk.green(filename))
        resolve(message + "wrote " + filename)
      })
      .catch(reject)
  })
})

Promise.all(routeRenders.map(t => t()))
  .then((res) => {
    console.log('Final result:', res)
  })
  .then(() => {
    console.log('Forcefully exiting')
    process.exit(0)
  })
  .catch((err) => {
    console.error('Error in route renders:', err)
    process.exit(1)
  })
