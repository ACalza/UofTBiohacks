import mkdirpAsync from 'mkdirp-then'
import fsp from 'fs-promise'
import React from 'react'
import ReactDOMServer from 'react-dom/server'
import chalk from 'chalk'

import Page from './components/Page.js'

// auto generated by loaders/routes.js
const routes = {}

console.log(chalk.magenta('Found these pages:'))
Object.keys(routes).map(r => console.log(r))

const routeRenders = Object.keys(routes).map((route) => () => {
  return new Promise((resolve, reject) => {
    console.log(chalk.magenta(`Attempting ${chalk.blue('React.createElement')} on ${route}`))
    let component
    try {
      component = routes[route]().default
    } catch(e) {
      console.error('component err, ', e)
      return reject(e);
    }

    if (typeof(component) === 'function') {
      try {
        component = React.createElement(component)
      } catch(e) {
        console.error('build.js: ', e)
        return reject(e);
      }
    }
    let name = route.split("/")[0]

    route = 'dist/' + route

    let page
    try {
      page =
      '<!doctype html>\n'
      + ReactDOMServer.renderToStaticMarkup(<Page body={component} name={name.replace('.js', '')}/>)
    } catch(e) {
      console.error('static markup:' , e)
      return reject(e);
    }
    console.log(chalk.green(`Created element for ${route}`))
    const dir = route.replace(/\/index.js$/, '')
    const filename = route.replace(/\.js$/, '.html')
    mkdirpAsync(dir)
    .then(res => fsp.writeFile(filename, page))
    .then(res => {
      console.log('wrote ' + chalk.green(filename))
      resolve("wrote " + filename)
    })
    .catch(err => {
      console.error(err)
      reject(err)
    })
  })
})

Promise.all(routeRenders.map(p => p())).then(console.log).catch(console.error)
